{"version":3,"sources":["App.module.css","Components/NewTask/NewTask.module.css","Components/NewTask/Input/Input.module.scss","Components/NewTask/Button/Button.module.scss","Components/Task/Task.module.css","Components/NewTask/Input/Input.js","Components/NewTask/Button/Button.js","Components/NewTask/NewTask.js","Components/Task/Task.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Input","onInputFunction","type","onChange","className","styles","placeholder","Button","onClickFunction","onClick","NewTask","onInputChange","onAddTask","Together","Task","props","onEditTask","i","setState","prevState","noteEdited","state","noteDone","taskText","this","id","task","editTask","deleteTask","doneTask","value","e","Note","name","Component","App","inputTask","target","newTask","tasks","onDeleteTask","indexToDelete","updatedNotes","filter","currentTasks","onDoneTask","doneIndex","updatedTasks","push","savedTasks","localStorage","getItem","JSON","parse","stringify","setItem","list","map","console","log","Main","List","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9436a8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"App_Main__HQkvd\",\"List\":\"App_List__3E8wO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Together\":\"NewTask_Together__3r58j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1BUHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__exxO6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Note\":\"Task_Note__36S89\"};","import styles from './Input.module.scss'\n\nconst Input = ({ onInputFunction }) => {\n    return (\n        <input type=\"text\" onChange={onInputFunction} className={styles.Input} placeholder=\"Your new task...\" />\n    )\n}\n\nexport default Input;","import styles from './Button.module.scss'\n\nconst Button = ({ onClickFunction }) => {\n    return (\n        <button onClick={onClickFunction} className={styles.Button} type=\"submit\">Add</button>\n    )\n}\n\nexport default Button;","import styles from './NewTask.module.css'\n\nimport Input from './Input/Input'\nimport AddButton from './Button/Button'\n\n\nconst NewTask = ({ onInputChange, onAddTask }) => {\n\n    return (\n        <div className={styles.Together}>\n            <Input onInputFunction={onInputChange} />\n            <AddButton onClickFunction={onAddTask} />\n        </div>\n    )\n\n}\n\nexport default NewTask;","import { Component } from 'react'\nimport styles from './Task.module.css'\n\nclass Task extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            noteEdited: null,\n            noteDone: null\n        }\n    }\n\n    onEditTask = (i) => {\n        this.setState(prevState => {\n\n            // If edit button is clicked the second time (on Done) it will pass the same id\n            // It that happens - set noteEdited back to null\n            if (prevState.noteEdited === i)\n                return { noteEdited: null }\n            else {\n                return { noteEdited: i }\n            }\n        })\n    }\n\n\n\n    render(){\n        const { id, task, editTask, deleteTask, doneTask } = this.props;\n        let taskText;\n\n        // Comparing state id with map id\n        if (this.state.noteEdited === id) {\n            taskText = <input type=\"text\" value={task} onChange={(e) => editTask(e, id)} />\n        } else {\n            taskText = <span>{task}</span>\n        }\n\n        return (\n            <li className={styles.Note}>\n                <input type=\"checkbox\" name={task} id={task} onClick={() => doneTask(id)} />\n                {taskText}\n                <button onClick={() => this.onEditTask(id)}>\n                    {this.state.noteEdited === id ? \"Done\" : \"Edit\"}\n                </button>\n                <button onClick={() => deleteTask(id)}>X</button>\n            </li>\n        )\n    }\n\n}\n\nexport default Task;","import React from 'react';\nimport styles from './App.module.css';\n\n\n\nimport NewTask from './Components/NewTask/NewTask'\nimport Task from './Components/Task/Task'\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputTask: '',\n      tasks: []\n    }\n  }\n\n  /*---------------------------------------------------------------------*/\n  /* LocalStorage START\n  -----------------------------------------------------------------------*/\n\n  componentDidMount() {\n    const savedTasks = localStorage.getItem(\"savedTasks\")\n\n    if (savedTasks) {\n      this.setState({\n        tasks: JSON.parse(savedTasks)\n      })\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.tasks !== this.state.tasks) {\n      const savedTasks = JSON.stringify(this.state.tasks)\n      localStorage.setItem(\"savedTasks\", savedTasks)\n    }\n  }\n  /*---------------------------------------------------------------------*/\n  /* LocalStorage END\n  -----------------------------------------------------------------------*/\n\n  /*---------------------------------------------------------------------*/\n  /* NewTask methods START\n  -----------------------------------------------------------------------*/\n\n  onInputChange = (e) => {\n    this.setState({\n      inputTask: e.target.value\n    })\n  }\n\n  onAddTask = () => {\n    let newTask = this.state.inputTask;\n\n    // NOTE: prevState.tasks.push(newTask) does not work, need to use concat or spread to create a new array version\n    // https://stackoverflow.com/questions/41052598/reactjs-array-push-function-not-working-in-setstate\n    this.setState(prevState => {\n      return { tasks: [...prevState.tasks, newTask] }\n    })\n\n  }\n\n  /*---------------------------------------------------------------------*/\n  /* NewTask methods END\n  -----------------------------------------------------------------------*/\n\n  /*---------------------------------------------------------------------*/\n  /* Task methods START\n  -----------------------------------------------------------------------*/\n\n  onDeleteTask = (indexToDelete) => {\n\n    let updatedNotes = [...this.state.tasks].filter(\n      (task, i) => i !== indexToDelete\n    )\n\n    this.setState({ tasks: updatedNotes })\n  }\n\n  onEditTask = (e, i) => {\n    const currentTasks = [...this.state.tasks]\n\n    currentTasks[i] = e.target.value;\n\n    this.setState({\n      tasks: currentTasks\n    })\n  }\n\n  onDoneTask = (doneIndex) => {\n    \n    const currentTasks = [...this.state.tasks]\n\n    const doneTask = currentTasks[doneIndex]\n\n    const updatedTasks = currentTasks.filter((task, i) => i !== doneIndex)\n\n    updatedTasks.push(doneTask)\n\n    this.setState({\n      tasks: updatedTasks\n    })\n  }\n\n  /*---------------------------------------------------------------------*/\n  /* Task methods END\n  -----------------------------------------------------------------------*/\n\n\n\n  render() {\n\n    let list;\n\n    if (this.state.tasks !== []) {\n      list = this.state.tasks.map((task, i) => {\n        return (\n          <Task\n            key={i}\n            id={i} // the map id\n            task={task}\n            editTask={this.onEditTask}\n            deleteTask={this.onDeleteTask}\n            doneTask={this.onDoneTask}\n          />\n        )\n      })\n    } else {\n      list = <div></div>\n    }\n\n    console.log(this.state.tasks);\n\n    return (\n      <main className={styles.Main}>\n\n        <NewTask onInputChange={this.onInputChange} onAddTask={this.onAddTask} />\n\n        <ul className={styles.List}>\n          {list}\n        </ul>\n\n      </main>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}